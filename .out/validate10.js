function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="bar" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if((data.baz === undefined) || (!(func0.call(data, "baz")))){const err0 = {instancePath,schemaPath:"/required",keyword:"required",params:{missingProperty: "baz"},message:"must have required property '"+"baz"+"'",schema:schema11.required,parentSchema:schema11,data};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 of Object.keys(data)){if(!((key0 === "bar") || (key0 === "baz"))){let data0 = data[key0];if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if((data0.bar1 === undefined) || (!(func0.call(data0, "bar1")))){const err1 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"/additionalProperties/required",keyword:"required",params:{missingProperty: "bar1"},message:"must have required property '"+"bar1"+"'",schema:schema11.additionalProperties.required,parentSchema:schema11.additionalProperties,data:data0};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}}}if(data.baz !== undefined && func0.call(data, "baz")){let data3 = data.baz;if(data3 && typeof data3 == "object" && !Array.isArray(data3)){if((data3.bar === undefined) || (!(func0.call(data3, "bar")))){const err2 = {instancePath:instancePath+"/baz",schemaPath:"foo/required",keyword:"required",params:{missingProperty: "bar"},message:"must have required property '"+"bar"+"'",schema:schema13.required,parentSchema:schema13,data:data3};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key1 of Object.keys(data3)){if(!(key1 === "bar")){const err3 = {instancePath:instancePath+"/baz",schemaPath:"foo/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties",schema:false,parentSchema:schema13,data:data3};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}}}validate10.errors = vErrors;return errors === 0;}